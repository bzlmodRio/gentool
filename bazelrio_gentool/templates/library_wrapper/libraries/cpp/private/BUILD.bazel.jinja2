load("@rules_cc//cc:defs.bzl", "cc_library")

{%- if target.headers %}
alias(
    name = "header_files",
    actual = "@{{target.get_header_archive_name()}}//:header_files",
    visibility = ["@{{group.repo_name}}//:__subpackages__"],
)
{% endif %}

{% if target.get_shared_library_select() != "," -%}
{%- if target.get_shared_library_interface_select() != "," %}
cc_library(
    name = "shared_interface",
    srcs = select({
{{target.get_shared_library_interface_select()}}
    }),
    linkstatic = True,
    tags = ["manual"],
    {%- if target.get_shared_incompatible_targets() %}
    target_compatible_with = select({
        {%- for toolchain in target.get_shared_incompatible_targets() %}
        "{{toolchain}}": ["@platforms//:incompatible"],
        {%- endfor %}
        "//conditions:default": [],
    }),
    {%- endif %}
    visibility = ["@{{group.repo_name}}//:__subpackages__"],
    {%- if target.headers %}
    deps = ["@{{target.get_header_archive_name()}}//:headers"],{% endif %}
)
{%- endif %}

filegroup(
    name = "shared_raw",
    srcs = select({
{{target.get_shared_library_select()}}
    }),
    visibility = ["@{{group.repo_name}}//:__subpackages__"],
)

cc_library(
    name = "shared",
    srcs = [":shared_raw"],
    {%- if target.get_shared_incompatible_targets() %}
    target_compatible_with = select({
        {%- for toolchain in target.get_shared_incompatible_targets() %}
        "{{toolchain}}": ["@platforms//:incompatible"],
        {%- endfor %}
        "//conditions:default": [],
    }),
    {%- endif %}
    visibility = ["@{{group.repo_name}}//:__subpackages__"],
{%- if target.headers or target.get_shared_library_interface_select() != "," %}
    deps = [
      {%- for dep in target.get_sorted_dependencies() %}
        "@{{dep.repo_name}}//libraries/cpp/{{dep.parent_folder}}:shared",
      {%- endfor %}] + {% if target.get_shared_library_interface_select() != "," %}select({
        "@rules_bazelrio//conditions:windows": [":shared_interface"],
        "//conditions:default": [],
    }){% if target.headers %} + {% else %},{% endif %}{% endif %}{% endif %}{% if target.headers %}["@{{target.get_header_archive_name()}}//:headers"],
{%- endif %}
    alwayslink = 1,
)
{%+ endif %}
{%- if target.get_static_library_select() != "," %}
cc_library(
    name = "static",
    linkstatic = 1,
    {%- if target.get_static_incompatible_targets() %}
    target_compatible_with = select({
        {%- for toolchain in target.get_static_incompatible_targets() %}
        "{{toolchain}}": ["@platforms//:incompatible"],
        {%- endfor %}
        "//conditions:default": [],
    }),
    {%- endif %}
    visibility = ["@{{group.repo_name}}//:__subpackages__"],
    deps = {% if target.headers %}["@{{target.get_header_archive_name()}}//:headers"] + {% endif %}select({
{{target.get_static_library_select()}}
    }),
)
{%- endif %}
{%- if target.has_jni %}

cc_library(
    name = "jni",
    srcs = select({
{{target.get_jni_shared_library_select()}}
    }),
    linkstatic = 1,
    {%- if target.get_jni_incompatible_targets() %}
    target_compatible_with = select({
        {%- for toolchain in target.get_jni_incompatible_targets() %}
        "{{toolchain}}": ["@platforms//:incompatible"],
        {%- endfor %}
        "//conditions:default": [],
    }),
    {%- endif %}
    visibility = ["@{{group.repo_name}}//:__subpackages__"],
    deps = [{% if target.headers %}"@{{target.get_header_archive_name()}}//:headers",{% endif %}":shared"]
)
{%- endif %}


        