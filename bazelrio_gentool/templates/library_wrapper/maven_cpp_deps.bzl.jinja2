load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive"{% if group.java_native_tools %}, "http_jar"{% endif %})
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

cc_library_headers = """cc_library(
    name = "headers",
    hdrs = glob(["**"]),
    includes = ["."],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "header_files",
    srcs = glob(["**"]),
    visibility = ["//visibility:public"],
)
"""

cc_library_sources = """filegroup(
     name = "sources",
     srcs = glob(["**"]),
     visibility = ["//visibility:public"],
 )
 """

def __setup_{{group.sanitized_repo_name}}_cpp_dependencies(mctx):
    {%- for cpp_dep in group.cc_deps %}
    {%- if cpp_dep.headers %}
    maybe(
        http_archive,
        "{{cpp_dep.get_archive_name('headers')}}",
        url = "{{cpp_dep.get_url('headers')}}",
        sha256 = "{{cpp_dep.get_sha256('headers')}}",
        build_file_content = {{cpp_dep.get_build_file_content('headers')}},
    )
    {%- endif %}
    {%- if cpp_dep.sources %}
    maybe(
        http_archive,
        "{{cpp_dep.get_archive_name('sources')}}",
        url = "{{cpp_dep.get_url('sources')}}",
        sha256 = "{{cpp_dep.get_sha256('sources')}}",
        build_file_content = {{cpp_dep.get_build_file_content('sources')}},
    )
    {%- endif %}
    {%- for resource in cpp_dep.resources %}
    {%- set sha256 = cpp_dep.get_sha256(resource) %}
    {%- if sha256 %}
    maybe(
        http_archive,
        "{{cpp_dep.get_archive_name(resource)}}",
        url = "{{cpp_dep.get_url(resource)}}",
        sha256 = "{{sha256}}",
        build_file = "{{cpp_dep.get_build_file_path(resource)}}",{{ cpp_dep.maybe_patch_args(resource)}}
    )
    {%- endif %}
    {%- endfor %}
    {%- endfor %}

    
    {%- for tool_dep in group.java_native_tools %}
    {%- for resource in tool_dep.resources %}
    maybe(
        http_jar,
        name = "{{tool_dep.get_archive_name(resource)}}",
        url = "{{tool_dep.get_url(resource)}}",
        sha256 = "{{tool_dep.get_sha256(resource)}}",
    )
    {%- endfor %}
    {%- endfor %}

    {%- for tool_dep in group.executable_tools %}
    {%- for resource in tool_dep.resources %}
    maybe(
        http_archive,
        name = "{{tool_dep.get_archive_name(resource)}}",
        url = "{{tool_dep.get_url(resource)}}",
        sha256 = "{{tool_dep.get_sha256(resource)}}",
        build_file_content = "filegroup(name='all', srcs=glob(['**']), visibility=['//visibility:public'])",
    )
    {%- endfor %}
    {%- endfor %}

def setup_legacy_{{group.sanitized_repo_name}}_cpp_dependencies():
    __setup_{{group.sanitized_repo_name}}_cpp_dependencies(None)

setup_{{group.sanitized_repo_name}}_cpp_dependencies = module_extension(
    __setup_{{group.sanitized_repo_name}}_cpp_dependencies,
)

